/*
Copyright 2023.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/pinetree227/location-ctl/api/ctl/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// LocationCtlLister helps list LocationCtls.
// All objects returned here must be treated as read-only.
type LocationCtlLister interface {
	// List lists all LocationCtls in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.LocationCtl, err error)
	// LocationCtls returns an object that can list and get LocationCtls.
	LocationCtls(namespace string) LocationCtlNamespaceLister
	LocationCtlListerExpansion
}

// locationCtlLister implements the LocationCtlLister interface.
type locationCtlLister struct {
	indexer cache.Indexer
}

// NewLocationCtlLister returns a new LocationCtlLister.
func NewLocationCtlLister(indexer cache.Indexer) LocationCtlLister {
	return &locationCtlLister{indexer: indexer}
}

// List lists all LocationCtls in the indexer.
func (s *locationCtlLister) List(selector labels.Selector) (ret []*v1.LocationCtl, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.LocationCtl))
	})
	return ret, err
}

// LocationCtls returns an object that can list and get LocationCtls.
func (s *locationCtlLister) LocationCtls(namespace string) LocationCtlNamespaceLister {
	return locationCtlNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// LocationCtlNamespaceLister helps list and get LocationCtls.
// All objects returned here must be treated as read-only.
type LocationCtlNamespaceLister interface {
	// List lists all LocationCtls in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.LocationCtl, err error)
	// Get retrieves the LocationCtl from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1.LocationCtl, error)
	LocationCtlNamespaceListerExpansion
}

// locationCtlNamespaceLister implements the LocationCtlNamespaceLister
// interface.
type locationCtlNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all LocationCtls in the indexer for a given namespace.
func (s locationCtlNamespaceLister) List(selector labels.Selector) (ret []*v1.LocationCtl, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.LocationCtl))
	})
	return ret, err
}

// Get retrieves the LocationCtl from the indexer for a given namespace and name.
func (s locationCtlNamespaceLister) Get(name string) (*v1.LocationCtl, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("locationctl"), name)
	}
	return obj.(*v1.LocationCtl), nil
}
